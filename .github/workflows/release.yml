name: Build & Release

on:
  push:
    tags:
      - "v*"
      - "*.*.*"
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build"
        required: true
        default: "windows"
        type: choice
        options:
          - windows
          - macos
          - linux
          - all

env:
  CSC_IDENTITY_AUTO_DISCOVERY: false
  NODE_VERSION: "20"

jobs:
  # ============================================
  # Windows Build (Unsigned)
  # ============================================
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    permissions:
      contents: write
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all'))

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧹 Clean Previous Build
        run: npm run clean

      - name: 🔨 Minify & Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            dist/*.exe
            dist/latest.yml
          retention-days: 7

      - name: 📋 List Build Output
        run: |
          echo "=== Build Output ==="
          dir dist
          echo "=== File Sizes ==="
          for %f in (dist\*.exe) do echo %~nxf: %~zf bytes

  # ============================================
  # macOS Build
  # ============================================
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    permissions:
      contents: write
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'macos' || github.event.inputs.platform == 'all'))

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧹 Clean Previous Build
        run: npm run clean

      - name: 🔨 Minify & Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:mac

      - name: 📋 List Build Output
        run: |
          echo "=== Build Output ==="
          ls -la dist/
          echo "=== File Sizes ==="
          ls -lah dist/*.dmg dist/*.zip 2>/dev/null || echo "No DMG/ZIP files found"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml
          retention-days: 7

  # ============================================
  # Linux Build
  # ============================================
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all'))

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧹 Clean Previous Build
        run: npm run clean

      - name: 🔨 Minify & Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:linux

      - name: 📋 List Build Output
        run: |
          echo "=== Build Output ==="
          ls -la dist/
          echo "=== File Sizes ==="
          ls -lah dist/*.AppImage dist/*.tar.gz dist/*.deb dist/*.rpm 2>/dev/null || echo "No build files found"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            dist/*.AppImage
            dist/*.tar.gz
            dist/*.deb
            dist/*.rpm
            dist/latest-linux.yml
          retention-days: 7

  # ============================================
  # Create GitHub Release
  # ============================================
  release:
    name: Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: 📥 Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: release-files

      - name: 📥 Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer
          path: release-files
        continue-on-error: true

      - name: 📥 Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: release-files
        continue-on-error: true

      - name: 📋 List Release Files
        run: ls -lah release-files/

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## 📦 Downloads

            ### 🪟 Windows
            - `reysilvaGen-Setup-*.exe` - NSIS Installer (Recommended)
            - `reysilvaGen-*-Portable.exe` - Portable version

            ### 🍎 macOS  
            - `reysilvaGen-*-mac-x64.dmg` - Intel Macs
            - `reysilvaGen-*-mac-arm64.dmg` - Apple Silicon (M1/M2/M3)

            ### 🐧 Linux
            - `reysilvaGen-*-linux-x64.AppImage` - Universal AppImage
            - `reysilvaGen-*-linux-x64.deb` - Debian/Ubuntu package
            - `reysilvaGen-*-linux-x64.rpm` - Fedora/RHEL package

            ---

            ## 🔄 Auto-Update
            All installer versions support automatic updates.

            ## ⚠️ Installation Notes
            - **Windows:** May show SmartScreen warning - click "More info" → "Run anyway"
            - **macOS:** Right-click app → "Open" to bypass Gatekeeper
            - **Linux:** Make AppImage executable with `chmod +x`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # Publish to GitHub (Manual)
  # ============================================
  publish:
    name: Publish to GitHub
    runs-on: windows-latest
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.platform == 'windows'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧹 Clean Previous Build
        run: npm run clean

      - name: 🚀 Minify, Build & Publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish
